import urx
import logging
from urx import ursecmon

def MoveRG2(width):
	prog = ""
	try:
		if width>=0 and width <=110:
			prog+=("def rg2grpCntrl():\n")
			prog+=("	textmsg(\"inside RG2 function called\")\n")
			prog+=("	target_width="+str(width))+"\n"
			prog+=("	target_force=40\n")
			prog+=("	payload=1.0\n")
			prog+=("	set_payload1=False\n")
			prog+=("	depth_compensation=False\n")
			prog+=("	slave=False\n")
			prog+=("	timeout = 0\n")
			prog+=("	while get_digital_in(9) == False:\n")
			prog+=("		textmsg(\"inside while\")\n")
			prog+=("		if timeout > 400:\n")
			prog+=("			break\n")
			prog+=("		end\n")
			prog+=("		timeout = timeout+1\n")
			prog+=("		sync()\n")
			prog+=("	end\n")
			prog+=("	textmsg(\"outside while\")\n")
			prog+=("	def bit(input):\n")
			prog+=("		msb=65536\n")
			prog+=("		local i=0\n")
			prog+=("		local output=0\n")
			prog+=("		while i<17:\n")
			prog+=("			set_digital_out(8,True)\n")
			prog+=("			if input>=msb:\n")
			prog+=("				input=input-msb\n")
			prog+=("				set_digital_out(9,False)\n")
			prog+=("			else:\n")
			prog+=("				set_digital_out(9,True)\n")
			prog+=("			end\n")
			prog+=("			if get_digital_in(8):\n")
			prog+=("				out=1\n")
			prog+=("			end\n")
			prog+=("			sync()\n")
			prog+=("			set_digital_out(8,False)\n")
			prog+=("			sync()\n")
			prog+=("			input=input*2\n")
			prog+=("			output=output*2\n")
			prog+=("			i=i+1\n")
			prog+=("		end\n")
			prog+=("		return output\n")
			prog+=("	end\n")
			prog+=("	textmsg(\"outside bit definition\")\n")
			prog+=("	target_width=target_width+0.0\n")
			prog+=("	if target_force>40:\n")
			prog+=("		target_force=40\n")
			prog+=("	end\n")
			prog+=("	if target_force<4:\n")
			prog+=("		target_force=4\n")
			prog+=("	end\n")
			prog+=("	if target_width>110:\n")
			prog+=("		target_width=110\n")
			prog+=("	end\n")
			prog+=("	if target_width<0:\n")
			prog+=("		target_width=0\n")
			prog+=("	end\n")
			prog+=("	rg_data=floor(target_width)*4\n")
			prog+=("	rg_data=rg_data+floor(target_force/2)*4*111\n")
			prog+=("	if slave:\n")
			prog+=("		rg_data=rg_data+16384\n")
			prog+=("	end\n")
			prog+=("	textmsg(\"about to call bit\")\n")
			prog+=("	bit(rg_data)\n")
			prog+=("	textmsg(\"called bit\")\n")
			prog+=("	if depth_compensation:\n")
			prog+=("		finger_length = 55.0/1000\n")
			prog+=("		finger_heigth_disp = 5.0/1000\n")
			prog+=("		center_displacement = 7.5/1000\n")
			prog+=("		start_pose = get_forward_kin()\n")
			prog+=("		set_analog_inputrange(2, 1)\n")
			prog+=("		zscale = (get_analog_in(2)-0.026)/2.976\n")
			prog+=("		zangle = zscale*1.57079633-0.087266462\n")
			prog+=("		zwidth = 5+110*sin(zangle)\n")
			prog+=("		start_depth = cos(zangle)*finger_length\n")
			prog+=("		sync()\n")
			prog+=("		sync()\n")
			prog+=("		timeout = 0\n")
			prog+=("		while get_digital_in(9) == True:\n")
			prog+=("			timeout=timeout+1\n")
			prog+=("			sync()\n")
			prog+=("			if timeout > 20:\n")
			prog+=("				break\n")
			prog+=("			end\n")
			prog+=("		end\n")
			prog+=("		timeout = 0\n")
			prog+=("		while get_digital_in(9) == False:\n")
			prog+=("			zscale = (get_analog_in(2)-0.026)/2.976\n")
			prog+=("			zangle = zscale*1.57079633-0.087266462\n")
			prog+=("			zwidth = 5+110*sin(zangle)\n")
			prog+=("			measure_depth = cos(zangle)*finger_length\n")
			prog+=("			compensation_depth = (measure_depth - start_depth)\n")
			prog+=("			target_pose = pose_trans(start_pose,p[0,0,-compensation_depth,0,0,0])\n")
			prog+=("			if timeout > 400:\n")
			prog+=("				break\n")
			prog+=("			end\n")
			prog+=("			timeout=timeout+1\n")
			prog+=("			servoj(get_inverse_kin(target_pose),0,0,0.008,0.033,1700)\n")
			prog+=("		end\n")
			prog+=("		nspeed = norm(get_actual_tcp_speed())\n")
			prog+=("		while nspeed > 0.001:\n")
			prog+=("			servoj(get_inverse_kin(target_pose),0,0,0.008,0.033,1700)\n")
			prog+=("			nspeed = norm(get_actual_tcp_speed())\n")
			prog+=("		end\n")
			prog+=("	end\n")
			prog+=("	if depth_compensation==False:\n")
			prog+=("		timeout = 0\n")
			prog+=("		while get_digital_in(9) == True:\n")
			prog+=("			timeout = timeout+1\n")
			prog+=("			sync()\n")
			prog+=("			if timeout > 20:\n")
			prog+=("				break\n")
			prog+=("			end\n")
			prog+=("		end\n")
			prog+=("		timeout = 0\n")
			prog+=("		while get_digital_in(9) == False:\n")
			prog+=("			timeout = timeout+1\n")
			prog+=("			sync()\n")
			prog+=("			if timeout > 400:\n")
			prog+=("				break\n")
			prog+=("			end\n")
			prog+=("		end\n")
			prog+=("	end\n")
			prog+=("	if set_payload1:\n")
			prog+=("		if slave:\n")
			prog+=("			if get_analog_in(3) < 2:\n")
			prog+=("				zslam=0\n")
			prog+=("			else:\n")
			prog+=("				zslam=payload\n")
			prog+=("			end\n")
			prog+=("		else:\n")
			prog+=("			if get_digital_in(8) == False:\n")
			prog+=("				zmasm=0\n")
			prog+=("			else:\n")
			prog+=("				zmasm=payload\n")
			prog+=("			end\n")
			prog+=("		end\n")
			prog+=("		zsysm=0.0\n")
			prog+=("		zload=zmasm+zslam+zsysm\n")
			prog+=("		set_payload(zload)\n")
			prog+=("	end\n")
			prog+=("end\n")
			return prog
		else:
			return "Please ensure the gripper width is between 0 and 110"
	except:
		return "An Error Occured"
		



rob = urx.Robot('10.0.0.157')
secmon = ursecmon.SecondaryMonitor(rob.host)
print MoveRG2(1000)
rob.send_program(MoveRG2(110))
rob.close()
secmon.close()
